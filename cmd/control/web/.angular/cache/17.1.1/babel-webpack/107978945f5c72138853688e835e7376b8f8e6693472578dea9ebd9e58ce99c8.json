{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jpeery1/Desktop/byuoitav/camera-services/cmd/control/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, ViewChild } from '@angular/core';\nimport { ErrorDialog } from \"../../dialogs/error/error.dialog\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nlet LoginComponent = class LoginComponent {\n  constructor(router, api, dialog, route, cookieService, snackBar) {\n    var _this = this;\n    this.router = router;\n    this.api = api;\n    this.dialog = dialog;\n    this.route = route;\n    this.cookieService = cookieService;\n    this.snackBar = snackBar;\n    this.key = \"\";\n    this.getCodeChar = index => {\n      if (this.key.length > index) {\n        return this.key.charAt(index);\n      }\n      return \"\";\n    };\n    this.goToCameraControl = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.api.getControlInfo(_this.key).subscribe(info => {\n        _this.snackBar.dismiss();\n        return _this.router.navigate([\"/control/\" + info.room], {\n          queryParams: {\n            controlGroup: info.controlGroup\n          }\n        });\n      }, err => {\n        let msg = err.error;\n        switch (err.status) {\n          case 401:\n            msg = \"Invalid room code\";\n          default:\n        }\n        _this.showError(msg);\n      });\n      _this.key = \"\";\n    });\n  }\n  ngOnInit() {\n    this.keyboardEmitter = new EventEmitter();\n    this.keyboardEmitter.subscribe(s => {\n      if (s === \"done\") {\n        this.goToCameraControl();\n      } else {\n        this.key = s;\n      }\n    });\n    document.title = \"BYU Camera Control\";\n  }\n  ngAfterViewInit() {\n    this.form.nativeElement.focus();\n    const decoder = new JwtHelperService();\n    var decoded = decoder.decodeToken(this.cookieService.get(\"camera-services-control\"));\n    if (decoded != null && Object.keys(decoded.rooms).length > 0) {\n      var room = this.findMostRecentRoom(decoded.rooms);\n      let snackBarRef = this.snackBar.open(\"Would you like to go back to \" + room.name + \"?\", \"GO\", {\n        duration: 30000\n      });\n      snackBarRef.onAction().subscribe(() => {\n        this.router.navigate([\"/control/\" + room.name], {\n          queryParams: {\n            controlGroup: room.controlGroup.name\n          }\n        });\n      });\n    }\n  }\n  _focus() {\n    this.form.nativeElement.focus();\n  }\n  hasFocus() {\n    return document.hasFocus();\n  }\n  showError(msg) {\n    const dialogs = this.dialog.openDialogs.filter(dialog => {\n      return dialog.componentInstance instanceof ErrorDialog;\n    });\n    if (dialogs.length > 0) {\n      return;\n    }\n    this.dialog.open(ErrorDialog, {\n      width: \"fit-content\",\n      data: {\n        msg: msg\n      }\n    });\n  }\n  findMostRecentRoom(rooms) {\n    var mostRecent;\n    for (const [room, val] of Object.entries(rooms)) {\n      for (const [preset, time] of Object.entries(val)) {\n        if (mostRecent === undefined || mostRecent.controlGroup.time < time) {\n          mostRecent = new Room(room, new ControlGroup(preset, time));\n        }\n      }\n    }\n    return mostRecent;\n  }\n};\n__decorate([ViewChild('form')], LoginComponent.prototype, \"form\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };\nexport class Room {\n  constructor(name, controlGroup) {\n    this.name = name;\n    this.controlGroup = controlGroup;\n  }\n}\nexport class ControlGroup {\n  constructor(name, time) {\n    this.name = name;\n    this.time = time;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}