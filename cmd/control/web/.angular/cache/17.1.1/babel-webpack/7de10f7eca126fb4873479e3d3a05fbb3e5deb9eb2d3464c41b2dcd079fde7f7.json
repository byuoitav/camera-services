{"ast":null,"code":"import { of, EMPTY } from \"rxjs\";\nimport { take, mergeMap, catchError } from 'rxjs/operators';\nimport { ErrorDialog } from \"../dialogs/error/error.dialog\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/material/legacy-dialog\";\nexport let RoomResolver = /*#__PURE__*/(() => {\n  class RoomResolver {\n    constructor(router, api, dialog) {\n      this.router = router;\n      this.api = api;\n      this.dialog = dialog;\n    }\n    resolve(route, state) {\n      const room = route.paramMap.get(\"room\");\n      const cg = route.queryParamMap.get(\"controlGroup\");\n      return this.api.getCameras(room, cg).pipe(take(1), catchError(err => {\n        this.router.navigate([\"\"], {});\n        let msg = err.error;\n        switch (err.status) {\n          case 401:\n            msg = `Not authorized to control ${room}`;\n          default:\n        }\n        this.showError(msg);\n        return EMPTY;\n      }), mergeMap(cameras => {\n        return of(cameras);\n      }));\n    }\n    showError(msg) {\n      const dialogs = this.dialog.openDialogs.filter(dialog => {\n        return dialog.componentInstance instanceof ErrorDialog;\n      });\n      if (dialogs.length > 0) {\n        return;\n      }\n      this.dialog.open(ErrorDialog, {\n        width: \"fit-content\",\n        data: {\n          msg: msg\n        }\n      });\n    }\n    static #_ = this.ɵfac = function RoomResolver_Factory(t) {\n      return new (t || RoomResolver)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.APIService), i0.ɵɵinject(i3.MatLegacyDialog));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoomResolver,\n      factory: RoomResolver.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return RoomResolver;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}