package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/byuoitav/aver"
	cameraservices "github.com/byuoitav/camera-services"
	"github.com/byuoitav/camera-services/couch"
	"github.com/byuoitav/camera-services/event"
	"github.com/byuoitav/camera-services/handlers"
	"github.com/byuoitav/camera-services/keys"
	"github.com/byuoitav/visca"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/spf13/pflag"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

func main() {
	var (
		port     int
		logLevel string

		keyServiceAddr string

		dbAddr     string
		dbUsername string
		dbPassword string
		dbInsecure bool

		eventURL string
		name     string
		dnsAddr  string

		camUsername string
		camPassword string
	)

	// List of flags
	pflag.IntVarP(&port, "port", "P", 8080, "port to run the server on")
	pflag.StringVarP(&logLevel, "log-level", "L", "", "level to log at. refer to https://godoc.org/go.uber.org/zap/zapcore#Level for options")
	pflag.StringVar(&eventURL, "event-url", "", "url to send events to")
	pflag.StringVar(&name, "name", "", "the name of this service to include in events generated by it")
	pflag.StringVar(&dnsAddr, "dns-addr", "", "dns server to use for reverse ip lookups")
	pflag.StringVar(&camUsername, "cam-username", "", "username of the camera")
	pflag.StringVar(&camPassword, "cam-password", "", "password of the camera")
	pflag.StringVar(&keyServiceAddr, "key-service", "control-keys.av.byu.edu", "address of the control keys service")
	pflag.StringVar(&dbAddr, "db-address", "", "database address")
	pflag.StringVar(&dbUsername, "db-username", "", "database username")
	pflag.StringVar(&dbPassword, "db-password", "", "database password")
	pflag.BoolVar(&dbInsecure, "db-insecure", false, "don't use SSL in database connection")
	pflag.Parse()

	var level zapcore.Level
	if err := level.Set(logLevel); err != nil {
		fmt.Printf("invalid log level: %s\n", err.Error())
		os.Exit(1)
	}

	// build the couch config service
	if dbInsecure {
		dbAddr = "http://" + dbAddr
	} else {
		dbAddr = "https://" + dbAddr
	}

	var csOpts []couch.Option
	if dbUsername != "" {
		csOpts = append(csOpts, couch.WithBasicAuth(dbUsername, dbPassword))
	}

	// context for setup
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	cs, err := couch.New(ctx, dbAddr, csOpts...)
	if err != nil {
		log.Fatal("unable to create config service", zap.Error(err))
	}

	// build the logger
	config := zap.Config{
		Level:       zap.NewAtomicLevelAt(level),
		Development: false,
		Sampling: &zap.SamplingConfig{
			Initial:    100,
			Thereafter: 100,
		},
		Encoding: "json", EncoderConfig: zapcore.EncoderConfig{
			TimeKey:        "@",
			LevelKey:       "level",
			NameKey:        "logger",
			CallerKey:      "caller",
			MessageKey:     "msg",
			StacktraceKey:  "stacktrace",
			LineEnding:     zapcore.DefaultLineEnding,
			EncodeLevel:    zapcore.LowercaseLevelEncoder,
			EncodeTime:     zapcore.ISO8601TimeEncoder,
			EncodeDuration: zapcore.StringDurationEncoder,
			EncodeCaller:   zapcore.ShortCallerEncoder,
		},
		OutputPaths:      []string{"stderr"},
		ErrorOutputPaths: []string{"stderr"},
	}
	// build logging configuration
	log, err := config.Build()
	if err != nil {
		fmt.Printf("unable to build logger: %s", err)
		os.Exit(1)
	}
	defer func() {
		_ = log.Sync()
	}()

	// validate flags
	if name == "" {
		log.Fatal("--name is required. use --help for more details")
	}

	resolver := &net.Resolver{}
	if len(dnsAddr) > 0 {
		log.Info("Using custom DNS resolver for reserve IP lookups", zap.String("addr", dnsAddr))

		resolver.Dial = func(ctx context.Context, network, address string) (net.Conn, error) {
			dialer := &net.Dialer{}
			return dialer.DialContext(ctx, "udp", dnsAddr)
		}
	}

	cameras := &sync.Map{}
	middleware := handlers.Middleware{
		Logger: log,
	}
	handlers := handlers.NewCameraController(cs)
	handlers.Logger = log
	handlers.CreateCamera = func(ctx context.Context, addr string) (cameraservices.Camera, error) {
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()

		// TODO need to make this function better if New() does much of anything (see av-control-api/drivers)
		if cam, ok := cameras.Load(addr); ok {
			return cam.(*aver.Pro520), nil
		}

		addrNoPort := addr
		if strings.Contains(addrNoPort, ":") {
			var err error
			if addrNoPort, _, err = net.SplitHostPort(addrNoPort); err != nil {
				return nil, err
			}
		}

		username, password, err := cs.FindCameraAuthByAddress(ctx, addrNoPort)
		if err != nil {
			log.Warn("unable to get camera credentials from config service, falling back to flags",
				zap.String("camera", addrNoPort),
				zap.Error(err),
			)
			username = camUsername
			password = camPassword
		}

		if username == "" {
			log.Debug("no username provided for camera, using default")
			username = camUsername
		}

		if password == "" {
			log.Debug("no password provided for camera, using default")
			password = camPassword
		}

		cam := &aver.Pro520{
			Camera:   visca.New(addr, visca.WithLogger(log.Sugar().Named(addr))),
			Address:  addrNoPort,
			Username: username,
			Password: password,
		}

		cameras.Store(addr, cam)
		return cam, nil
	}
	handlers.EventPublisher = &event.Publisher{
		GeneratingSystem: name,
		URL:              eventURL,
		Resolver:         resolver,
	}

	handlers.ControlKeyService = &keys.ControlKeyService{
		Address: keyServiceAddr,
	}

	r := gin.New()
	r.Use(gin.Recovery())
	r.Use(cors.Default())

	debug := r.Group("/debug")
	debug.GET("/healthz", func(c *gin.Context) {
		c.String(http.StatusOK, "healthy")
	})
	debug.GET("/logz", func(c *gin.Context) {
		c.String(http.StatusOK, config.Level.String())
	})
	debug.GET("/logz/:level", func(c *gin.Context) {
		var level zapcore.Level
		if err := level.Set(c.Param("level")); err != nil {
			c.String(http.StatusBadRequest, err.Error())
			return
		}

		fmt.Printf("***\n\tSetting log level to %s\n***\n", level.String())
		config.Level.SetLevel(level)
		c.String(http.StatusOK, config.Level.String())
	})

	pro520 := r.Group("/v1/Pro520/:address", middleware.RequestID, middleware.Log, handlers.CameraMiddleware)
	pro520.GET("/pantilt/up", handlers.Publish("TiltUp"), handlers.TiltUp)
	pro520.GET("/pantilt/down", handlers.Publish("TiltDown"), handlers.TiltDown)
	pro520.GET("/pantilt/left", handlers.Publish("PanLeft"), handlers.PanLeft)
	pro520.GET("/pantilt/right", handlers.Publish("PanRight"), handlers.PanRight)
	pro520.GET("/pantilt/stop", handlers.Publish("PanTiltStop"), handlers.PanTiltStop)
	pro520.GET("/zoom/in", handlers.Publish("ZoomIn"), handlers.ZoomIn)
	pro520.GET("/zoom/out", handlers.Publish("ZoomOut"), handlers.ZoomOut)
	pro520.GET("/zoom/stop", handlers.Publish("ZoomStop"), handlers.ZoomStop)
	pro520.GET("/preset/:preset", handlers.Publish("GoToPreset"), handlers.GoToPreset)
	pro520.GET("/stream", handlers.Publish("Stream"), handlers.Stream)
	pro520.GET("/reboot", handlers.Publish("Reboot"), handlers.Reboot)
	pro520.GET("/savePreset/:preset", handlers.Publish("SavePreset"), handlers.SavePreset)

	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		log.Fatal("unable to bind listener", zap.Error(err))
	}

	log.Info("Starting server", zap.String("on", lis.Addr().String()))
	err = r.RunListener(lis)
	switch {
	case errors.Is(err, http.ErrServerClosed):
	case err != nil:
		log.Fatal("failed to serve", zap.Error(err))
	}
}
